#! armclang -E --target=arm-arm-none-eabi -mcpu=cortex-m0+ -xc
;; Preprocess this scatter file using armcc's preprocessor and #define's from stack.h
#include "stack.h"

;*******************************************************
; Copyright (c) 2006-2017 Arm Limited (or its affiliates). All rights reserved.
; Use, modification and redistribution of this file is subject to your possession of a
; valid End User License Agreement for the Arm Product of which these examples are part of 
; and your compliance with all applicable terms and conditions of such licence agreement.
;*******************************************************

; Scatter-file for Cortex-M0+ bare-metal example

; This scatter-file places the vector table, application code, data, stacks and heap at suitable addresses in the memory map.

; The vector table is placed first at the start of the image.
; Code starts after the last entry in the vector table.
; Data is placed at an address that must correspond to RAM.
; Stack and Heap are placed using ARM_LIB_STACKHEAP, to eliminate the need to set stack-base or heap-base in the debugger.
; System Control Space registers appear at their architecturally-defined addresses, based at 0xE000E000.


LOAD_REGION 0x00000000 0x0001FFFF
{
  VECTORS +0 0xC0     ; 16 exceptions + up to 32 interrupts, 4 bytes each entry == 0xC0
  {
    exceptions.o (vectors, +FIRST)     ; from exceptions.c
  }

  ; Code is placed immediately (+0) after the previous root region
  ; (so code region will also be a root region)
  CODE +0 0x4000-0xC0
  {
    * (+RO)           ; All program code, including library code
  }

  DATA 0x0001A000 0x2000
  {
    * (+RW, +ZI)      ; All RW and ZI data
  }

  ; Heap grows upwards from start of this region and
  ; Stack grows downwards from end of this region
  ; The Main Stack Pointer is initialized on reset to the top addresses of this region
  ARM_LIB_STACKHEAP 0x0001E000 EMPTY 0x1000
  {
  }

  ; The Process Stack Pointer is initialized in main.c to the top addresses of this region
  PROCESS_STACK 0x0001F000 EMPTY 0x1000
  {
  }

  ; System Control Space registers
  SCS_REGION 0xE000E000 UNINIT 0x1000
  {
    scs.o(.bss.scs_registers)
  }
}

SHARED_REGION 0x20100000 0x0003FFFF
{
	SHARED_MEM +0 0x3FFFF
	{
		main.o(shared_section.__at_0x20100000)
	}
}
