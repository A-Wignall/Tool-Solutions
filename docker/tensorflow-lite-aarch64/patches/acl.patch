 *******************************************************************************
 Copyright 2021 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************

diff --git a/src/runtime/CPP/CPPScheduler.cpp b/src/runtime/CPP/CPPScheduler.cpp
index 3bd80eb51..f590cd67f 100644
--- a/src/runtime/CPP/CPPScheduler.cpp
+++ b/src/runtime/CPP/CPPScheduler.cpp
@@ -34,6 +34,7 @@

 #include <atomic>
 #include <condition_variable>
+#include <cstdlib>
 #include <iostream>
 #include <list>
 #include <memory>
@@ -350,14 +351,18 @@ struct CPPScheduler::Impl final
     {
         _num_threads = num_threads == 0 ? thread_hint : num_threads;

+	int start_core = 0;
+	if(const char* env_c = std::getenv("START_CORE"))
+	  start_core = std::atoi(env_c);
+
         // Set affinity on main thread
-        set_thread_affinity(func(0, thread_hint));
+        set_thread_affinity(func(start_core, thread_hint));

         // Set affinity on worked threads
         _threads.clear();
         for(auto i = 1U; i < _num_threads; ++i)
         {
-            _threads.emplace_back(func(i, thread_hint));
+	  _threads.emplace_back(func(start_core + i, thread_hint));
         }
         auto_switch_mode(_num_threads);
     }
